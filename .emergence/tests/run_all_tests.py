#!/usr/bin/env python3
"""
EMERGENCE Comprehensive Test Runner

This script runs all test suites for the EMERGENCE autonomous testing system
and generates a comprehensive report of all test results.
"""

import os
import sys
import json
import subprocess
from pathlib import Path
from datetime import datetime
from typing import Dict, Any, List
import logging

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class EmergenceTestRunner:
    """Main test runner for all EMERGENCE test suites"""
    
    def __init__(self, base_dir: str = ".."):
        self.base_dir = Path(base_dir)
        self.test_suites = [
            "test_suite.py",
            "test_validation.py", 
            "test_integration.py",
            "test_performance.py"
        ]
        self.results = {}
    
    def run_all_test_suites(self) -> Dict[str, Any]:
        """Run all test suites and collect results"""
        logger.info("Starting comprehensive EMERGENCE test execution...")
        
        for test_suite in self.test_suites:
            self._run_test_suite(test_suite)
        
        return self.results
    
    def _run_test_suite(self, test_suite: str) -> None:
        """Run a single test suite"""
        test_file = self.base_dir / "tests" / test_suite
        
        if not test_file.exists():
            logger.warning(f"Test suite not found: {test_file}")
            self.results[test_suite] = {
                'status': 'not_found',
                'error': f'Test file {test_suite} not found'
            }
            return
        
        logger.info(f"Running test suite: {test_suite}")
        
        try:
            # Run the test suite
            result = subprocess.run(
                [sys.executable, str(test_file)],
                capture_output=True,
                text=True,
                timeout=300  # 5 minute timeout
            )
            
            # Parse results
            if result.returncode == 0:
                self.results[test_suite] = {
                    'status': 'passed',
                    'return_code': result.returncode,
                    'stdout': result.stdout,
                    'stderr': result.stderr
                }
                logger.info(f"✓ {test_suite} passed")
            else:
                self.results[test_suite] = {
                    'status': 'failed',
                    'return_code': result.returncode,
                    'stdout': result.stdout,
                    'stderr': result.stderr
                }
                logger.error(f"✗ {test_suite} failed")
                
        except subprocess.TimeoutExpired:
            self.results[test_suite] = {
                'status': 'timeout',
                'error': f'Test suite {test_suite} timed out after 5 minutes'
            }
            logger.error(f"⏰ {test_suite} timed out")
            
        except Exception as e:
            self.results[test_suite] = {
                'status': 'error',
                'error': f'Error running {test_suite}: {str(e)}'
            }
            logger.error(f"💥 {test_suite} error: {e}")
    
    def collect_test_reports(self) -> Dict[str, Any]:
        """Collect all test reports generated by individual test suites"""
        reports = {}
        
        report_files = [
            "test_report.json",
            "validation_test_report.json", 
            "integration_test_report.json",
            "performance_test_report.json"
        ]
        
        for report_file in report_files:
            report_path = self.base_dir / report_file
            if report_path.exists():
                try:
                    with open(report_path, 'r') as f:
                        reports[report_file] = json.load(f)
                        logger.info(f"Loaded report: {report_file}")
                except Exception as e:
                    logger.error(f"Failed to load report {report_file}: {e}")
                    reports[report_file] = {'error': str(e)}
            else:
                logger.warning(f"Report file not found: {report_path}")
        
        return reports
    
    def generate_comprehensive_report(self) -> Dict[str, Any]:
        """Generate a comprehensive report combining all test results"""
        # Collect test reports
        test_reports = self.collect_test_reports()
        
        # Calculate overall statistics
        total_tests = 0
        total_passed = 0
        total_failed = 0
        total_execution_time = 0.0
        
        for report_name, report_data in test_reports.items():
            if 'summary' in report_data:
                summary = report_data['summary']
                total_tests += summary.get('total_tests', 0)
                total_passed += summary.get('passed_tests', 0)
                total_failed += summary.get('failed_tests', 0)
                total_execution_time += summary.get('total_execution_time', 0.0)
        
        # Calculate suite statistics
        suites_run = len(self.results)
        suites_passed = sum(1 for result in self.results.values() if result.get('status') == 'passed')
        suites_failed = suites_run - suites_passed
        
        comprehensive_report = {
            'overall_summary': {
                'timestamp': datetime.now().isoformat(),
                'total_test_suites': suites_run,
                'passed_test_suites': suites_passed,
                'failed_test_suites': suites_failed,
                'suite_success_rate': suites_passed / suites_run if suites_run > 0 else 0,
                'total_individual_tests': total_tests,
                'total_passed_tests': total_passed,
                'total_failed_tests': total_failed,
                'test_success_rate': total_passed / total_tests if total_tests > 0 else 0,
                'total_execution_time': total_execution_time
            },
            'test_suite_results': self.results,
            'detailed_reports': test_reports
        }
        
        return comprehensive_report
    
    def print_summary(self, report: Dict[str, Any]) -> None:
        """Print a summary of all test results"""
        summary = report['overall_summary']
        
        print("\n" + "="*60)
        print("EMERGENCE COMPREHENSIVE TEST RESULTS")
        print("="*60)
        
        print(f"\n📊 OVERALL SUMMARY:")
        print(f"   Test Suites: {summary['total_test_suites']}")
        print(f"   Passed Suites: {summary['passed_test_suites']}")
        print(f"   Failed Suites: {summary['failed_test_suites']}")
        print(f"   Suite Success Rate: {summary['suite_success_rate']:.2%}")
        print(f"   Individual Tests: {summary['total_individual_tests']}")
        print(f"   Passed Tests: {summary['total_passed_tests']}")
        print(f"   Failed Tests: {summary['total_failed_tests']}")
        print(f"   Test Success Rate: {summary['test_success_rate']:.2%}")
        print(f"   Total Execution Time: {summary['total_execution_time']:.2f}s")
        
        print(f"\n📋 TEST SUITE RESULTS:")
        for suite_name, result in report['test_suite_results'].items():
            status = result.get('status', 'unknown')
            if status == 'passed':
                print(f"   ✓ {suite_name}: PASSED")
            elif status == 'failed':
                print(f"   ✗ {suite_name}: FAILED")
            elif status == 'timeout':
                print(f"   ⏰ {suite_name}: TIMEOUT")
            elif status == 'error':
                print(f"   💥 {suite_name}: ERROR")
            else:
                print(f"   ? {suite_name}: {status}")
        
        print(f"\n📈 DETAILED REPORTS:")
        for report_name, report_data in report['detailed_reports'].items():
            if 'summary' in report_data:
                summary = report_data['summary']
                print(f"   📄 {report_name}:")
                print(f"      Tests: {summary.get('total_tests', 0)}")
                print(f"      Passed: {summary.get('passed_tests', 0)}")
                print(f"      Failed: {summary.get('failed_tests', 0)}")
                print(f"      Success Rate: {summary.get('success_rate', 0):.2%}")
            else:
                print(f"   📄 {report_name}: No summary available")
    
    def save_comprehensive_report(self, report: Dict[str, Any]) -> str:
        """Save the comprehensive report to file"""
        report_file = self.base_dir / "comprehensive_test_report.json"
        
        with open(report_file, 'w') as f:
            json.dump(report, f, indent=2)
        
        return str(report_file)

def main():
    """Main function to run all test suites"""
    print("EMERGENCE Comprehensive Test Runner")
    print("=" * 50)
    
    # Initialize test runner
    runner = EmergenceTestRunner()
    
    # Run all test suites
    print("\n🚀 Running all test suites...")
    runner.run_all_test_suites()
    
    # Generate comprehensive report
    print("\n📊 Generating comprehensive report...")
    comprehensive_report = runner.generate_comprehensive_report()
    
    # Print summary
    runner.print_summary(comprehensive_report)
    
    # Save report
    report_file = runner.save_comprehensive_report(comprehensive_report)
    print(f"\n💾 Comprehensive report saved to: {report_file}")
    
    # Determine overall success
    summary = comprehensive_report['overall_summary']
    suites_failed = summary['failed_test_suites']
    tests_failed = summary['total_failed_tests']
    
    if suites_failed == 0 and tests_failed == 0:
        print("\n🎉 ALL TESTS PASSED! EMERGENCE system is fully validated.")
        return 0
    elif suites_failed == 0:
        print(f"\n⚠️  Some individual tests failed ({tests_failed}), but all test suites completed.")
        return 1
    else:
        print(f"\n❌ {suites_failed} test suites failed. System needs attention.")
        return 2

if __name__ == "__main__":
    exit(main()) 